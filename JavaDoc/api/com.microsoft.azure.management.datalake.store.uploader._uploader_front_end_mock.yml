items:
- uid: com.microsoft.azure.management.datalake.store.uploader._uploader_front_end_mock
  id: _uploader_front_end_mock
  parent: com.microsoft.azure.management.datalake.store.uploader
  children:
  - com.microsoft.azure.management.datalake.store.uploader._uploader_front_end_mock_1ab3617a5ff3389b4c872b3f4209367f8c
  - com.microsoft.azure.management.datalake.store.uploader._uploader_front_end_mock_1a98aee88e8397c08e2a75f1a95100e4ee
  - com.microsoft.azure.management.datalake.store.uploader._uploader_front_end_mock_1a169cd5d3bca23df910fb8a7cc0a7ea6d
  - com.microsoft.azure.management.datalake.store.uploader._uploader_front_end_mock_1a2f771d63239c606552e33b8fe3c6e1d2
  - com.microsoft.azure.management.datalake.store.uploader._uploader_front_end_mock_1a0d6593bc16338f402e59a4282653d6e5
  - com.microsoft.azure.management.datalake.store.uploader._uploader_front_end_mock_1a0f71b86d4ae49b8d27e8c918971fb199
  - com.microsoft.azure.management.datalake.store.uploader._uploader_front_end_mock_1a65337e83a61ff36b6a08a44869d298a2
  href: com.microsoft.azure.management.datalake.store.uploader._uploader_front_end_mock.yml
  langs:
  - java
  name: UploaderFrontEndMock
  fullName: com.microsoft.azure.management.datalake.store.uploader.UploaderFrontEndMock
  type: Class
  source:
    remote: &o0
      path: azure-mgmt-datalake-store-uploader/src/test/java/com/microsoft/azure/management/datalake/store/uploader/UploaderFrontEndMock.java
      branch: master
      repo: https://github.com/Azure/azure-sdk-for-java
    path: azure-mgmt-datalake-store-uploader/src/test/java/com/microsoft/azure/management/datalake/store/uploader/UploaderFrontEndMock.java
    startLine: 15
  package: com.microsoft.azure.management.datalake.store.uploader
  summary: <p>A front end mock used for unit testing <xref href="com.microsoft.azure.management.datalake.store.uploader._data_lake_store_uploader" data-throw-if-not-resolved="false"></xref></p>
  syntax:
    content: public class UploaderFrontEndMock implements FrontEndAdapter
  inheritance:
  - java.lang.Object
  - com.microsoft.azure.management.datalake.store.uploader._front_end_adapter
- uid: com.microsoft.azure.management.datalake.store.uploader._uploader_front_end_mock_1ab3617a5ff3389b4c872b3f4209367f8c
  id: _uploader_front_end_mock_1ab3617a5ff3389b4c872b3f4209367f8c
  parent: com.microsoft.azure.management.datalake.store.uploader._uploader_front_end_mock
  href: com.microsoft.azure.management.datalake.store.uploader._uploader_front_end_mock.yml
  langs:
  - java
  name: appendToStream(String streamPath, byte[] data, long offset, int byteCount)
  fullName: void com.microsoft.azure.management.datalake.store.uploader.UploaderFrontEndMock.appendToStream(String streamPath, byte[] data, long offset, int byteCount)
  type: Method
  source:
    remote: *o0
    path: azure-mgmt-datalake-store-uploader/src/test/java/com/microsoft/azure/management/datalake/store/uploader/UploaderFrontEndMock.java
    startLine: 53
  package: com.microsoft.azure.management.datalake.store.uploader
  summary: >-
    <p>Appends the given byte array to the end of a given stream.</p>

    <p></p>
  syntax:
    content: public void appendToStream(String streamPath, byte[] data, long offset, int byteCount)
    parameters:
    - id: streamPath
      type: "26831127"
      description: <p>The relative path to the stream. </p>
    - id: data
      type: bc819c2f
      description: <p>An array of bytes to be appended to the stream. </p>
    - id: offset
      type: 0364520f
      description: <p>The offset at which to append to the stream. </p>
    - id: length
      type: f75371fa
      description: <p>The number of bytes to append (starting at 0). </p>
  overridden: com.microsoft.azure.management.datalake.store.uploader._front_end_adapter_1a9ce0415d0e74ce3d6fbb66a9b1f5327c
  exceptions:
  - type: cbf33bbe
    description: <p>if the file does not exist or is inaccessible. </p>
  - type: 0f262a9d
    description: <p>if there is a failure communicating with the service. </p>
- uid: com.microsoft.azure.management.datalake.store.uploader._uploader_front_end_mock_1a98aee88e8397c08e2a75f1a95100e4ee
  id: _uploader_front_end_mock_1a98aee88e8397c08e2a75f1a95100e4ee
  parent: com.microsoft.azure.management.datalake.store.uploader._uploader_front_end_mock
  href: com.microsoft.azure.management.datalake.store.uploader._uploader_front_end_mock.yml
  langs:
  - java
  name: concatenate(String targetStreamPath, String[] inputStreamPaths)
  fullName: void com.microsoft.azure.management.datalake.store.uploader.UploaderFrontEndMock.concatenate(String targetStreamPath, String[] inputStreamPaths)
  type: Method
  source:
    remote: *o0
    path: azure-mgmt-datalake-store-uploader/src/test/java/com/microsoft/azure/management/datalake/store/uploader/UploaderFrontEndMock.java
    startLine: 65
  package: com.microsoft.azure.management.datalake.store.uploader
  summary: >-
    <p>Concatenates the given input streams (in order) into the given target stream. At the end of this operation, input streams will be deleted.</p>

    <p></p>
  syntax:
    content: public void concatenate(String targetStreamPath, String[] inputStreamPaths)
    parameters:
    - id: targetStreamPath
      type: "26831127"
      description: <p>The relative path to the target stream. </p>
    - id: inputStreamPaths
      type: 30d59cf1
      description: <p>An ordered array of paths to the input streams. </p>
  overridden: com.microsoft.azure.management.datalake.store.uploader._front_end_adapter_1ad2468325cf658d071116d95c9faf8099
  exceptions:
  - type: cbf33bbe
    description: <p>if the file does not exist or is inaccessible. </p>
  - type: 0f262a9d
    description: <p>if there is a failure communicating with the service. </p>
- uid: com.microsoft.azure.management.datalake.store.uploader._uploader_front_end_mock_1a169cd5d3bca23df910fb8a7cc0a7ea6d
  id: _uploader_front_end_mock_1a169cd5d3bca23df910fb8a7cc0a7ea6d
  parent: com.microsoft.azure.management.datalake.store.uploader._uploader_front_end_mock
  href: com.microsoft.azure.management.datalake.store.uploader._uploader_front_end_mock.yml
  langs:
  - java
  name: createStream(String streamPath, boolean overwrite, byte[] data, int byteCount)
  fullName: void com.microsoft.azure.management.datalake.store.uploader.UploaderFrontEndMock.createStream(String streamPath, boolean overwrite, byte[] data, int byteCount)
  type: Method
  source:
    remote: *o0
    path: azure-mgmt-datalake-store-uploader/src/test/java/com/microsoft/azure/management/datalake/store/uploader/UploaderFrontEndMock.java
    startLine: 36
  package: com.microsoft.azure.management.datalake.store.uploader
  summary: >-
    <p>Creates a new, empty stream at the given path.</p>

    <p></p>
  syntax:
    content: public void createStream(String streamPath, boolean overwrite, byte[] data, int byteCount)
    parameters:
    - id: streamPath
      type: "26831127"
      description: <p>The relative path to the stream. </p>
    - id: overwrite
      type: 4fc6e284
      description: <p>Whether to overwrite an existing stream. </p>
    - id: data
      type: bc819c2f
      description: <p>The data to include in the stream during creation. </p>
    - id: byteCount
      type: f75371fa
      description: <p>The number of bytes from data to include (starting at 0). </p>
  overridden: com.microsoft.azure.management.datalake.store.uploader._front_end_adapter_1ab8771533762c7df66172208a96efd9ed
  exceptions:
  - type: cbf33bbe
    description: <p>if the file does not exist or is inaccessible. </p>
  - type: 0f262a9d
    description: <p>if there is a failure communicating with the service. </p>
- uid: com.microsoft.azure.management.datalake.store.uploader._uploader_front_end_mock_1a2f771d63239c606552e33b8fe3c6e1d2
  id: _uploader_front_end_mock_1a2f771d63239c606552e33b8fe3c6e1d2
  parent: com.microsoft.azure.management.datalake.store.uploader._uploader_front_end_mock
  href: com.microsoft.azure.management.datalake.store.uploader._uploader_front_end_mock.yml
  langs:
  - java
  name: deleteStream(String streamPath, boolean recurse)
  fullName: void com.microsoft.azure.management.datalake.store.uploader.UploaderFrontEndMock.deleteStream(String streamPath, boolean recurse)
  type: Method
  source:
    remote: *o0
    path: azure-mgmt-datalake-store-uploader/src/test/java/com/microsoft/azure/management/datalake/store/uploader/UploaderFrontEndMock.java
    startLine: 49
  package: com.microsoft.azure.management.datalake.store.uploader
  summary: >-
    <p>Deletes an existing stream at the given path.</p>

    <p></p>
  syntax:
    content: public void deleteStream(String streamPath, boolean recurse)
    parameters:
    - id: streamPath
      type: "26831127"
      description: <p>The relative path to the stream. </p>
    - id: recurse
      type: 4fc6e284
      description: <p>if set to true recursively delete. This is used for folder streams only. </p>
  overridden: com.microsoft.azure.management.datalake.store.uploader._front_end_adapter_1ac0fb5d67c44b9ceba06f59625cffb38e
  exceptions:
  - type: cbf33bbe
    description: <p>if the file does not exist or is inaccessible. </p>
  - type: 0f262a9d
    description: <p>if there is a failure communicating with the service. </p>
- uid: com.microsoft.azure.management.datalake.store.uploader._uploader_front_end_mock_1a0d6593bc16338f402e59a4282653d6e5
  id: _uploader_front_end_mock_1a0d6593bc16338f402e59a4282653d6e5
  parent: com.microsoft.azure.management.datalake.store.uploader._uploader_front_end_mock
  href: com.microsoft.azure.management.datalake.store.uploader._uploader_front_end_mock.yml
  langs:
  - java
  name: getStreamLength(String streamPath)
  fullName: long com.microsoft.azure.management.datalake.store.uploader.UploaderFrontEndMock.getStreamLength(String streamPath)
  type: Method
  source:
    remote: *o0
    path: azure-mgmt-datalake-store-uploader/src/test/java/com/microsoft/azure/management/datalake/store/uploader/UploaderFrontEndMock.java
    startLine: 61
  package: com.microsoft.azure.management.datalake.store.uploader
  summary: >-
    <p>Gets a value indicating the length of a stream, in bytes.</p>

    <p></p>
  syntax:
    content: public long getStreamLength(String streamPath)
    parameters:
    - id: streamPath
      type: "26831127"
      description: <p>The relative path to the stream. </p>
    return:
      type: 0364520f
      description: <p>The length of the stream, in bytes. </p>
  overridden: com.microsoft.azure.management.datalake.store.uploader._front_end_adapter_1a31b19ae3b0c0f9c201d9694804c5cc51
  exceptions:
  - type: cbf33bbe
    description: <p>if the file does not exist or is inaccessible. </p>
  - type: 0f262a9d
    description: <p>if there is a failure communicating with the service. </p>
- uid: com.microsoft.azure.management.datalake.store.uploader._uploader_front_end_mock_1a0f71b86d4ae49b8d27e8c918971fb199
  id: _uploader_front_end_mock_1a0f71b86d4ae49b8d27e8c918971fb199
  parent: com.microsoft.azure.management.datalake.store.uploader._uploader_front_end_mock
  href: com.microsoft.azure.management.datalake.store.uploader._uploader_front_end_mock.yml
  langs:
  - java
  name: streamExists(String streamPath)
  fullName: boolean com.microsoft.azure.management.datalake.store.uploader.UploaderFrontEndMock.streamExists(String streamPath)
  type: Method
  source:
    remote: *o0
    path: azure-mgmt-datalake-store-uploader/src/test/java/com/microsoft/azure/management/datalake/store/uploader/UploaderFrontEndMock.java
    startLine: 57
  package: com.microsoft.azure.management.datalake.store.uploader
  summary: >-
    <p>Determines if the stream with given path exists.</p>

    <p></p>
  syntax:
    content: public boolean streamExists(String streamPath)
    parameters:
    - id: streamPath
      type: "26831127"
      description: <p>The relative path to the stream. </p>
    return:
      type: 4fc6e284
      description: <p>True if the stream exists, false otherwise. </p>
  overridden: com.microsoft.azure.management.datalake.store.uploader._front_end_adapter_1ac8b696fea86daf2e098af72fdcda0121
  exceptions:
  - type: cbf33bbe
    description: <p>if the file does not exist or is inaccessible. </p>
  - type: 0f262a9d
    description: <p>if there is a failure communicating with the service. </p>
- uid: com.microsoft.azure.management.datalake.store.uploader._uploader_front_end_mock_1a65337e83a61ff36b6a08a44869d298a2
  id: _uploader_front_end_mock_1a65337e83a61ff36b6a08a44869d298a2
  parent: com.microsoft.azure.management.datalake.store.uploader._uploader_front_end_mock
  href: com.microsoft.azure.management.datalake.store.uploader._uploader_front_end_mock.yml
  langs:
  - java
  name: UploaderFrontEndMock(FrontEndAdapter baseAdapter, boolean throwInConcat, boolean throwInCreate)
  fullName: com.microsoft.azure.management.datalake.store.uploader.UploaderFrontEndMock.UploaderFrontEndMock(FrontEndAdapter baseAdapter, boolean throwInConcat, boolean throwInCreate)
  type: Constructor
  source:
    remote: *o0
    path: azure-mgmt-datalake-store-uploader/src/test/java/com/microsoft/azure/management/datalake/store/uploader/UploaderFrontEndMock.java
    startLine: 28
  package: com.microsoft.azure.management.datalake.store.uploader
  summary: <p>Constructor with base front end. </p>
  syntax:
    content: public UploaderFrontEndMock(FrontEndAdapter baseAdapter, boolean throwInConcat, boolean throwInCreate)
    parameters:
    - id: baseAdapter
      type: com.microsoft.azure.management.datalake.store.uploader._front_end_adapter
      description: <p>The real front end to use when methods are not mocked. </p>
    - id: throwInConcat
      type: 4fc6e284
      description: <p>If true, indicates that concatenation implementation should throw instead of doing work. </p>
    - id: throwInCreate
      type: 4fc6e284
      description: <p>If true, indicates that the create implementation should throw instead of doing work. </p>
references:
- uid: 4fc6e284
  spec.java:
  - name: boolean
    fullName: boolean
- uid: cbf33bbe
  spec.java:
  - name: IOException
    fullName: IOException
- uid: 0f262a9d
  spec.java:
  - name: RestException
    fullName: RestException
- uid: "26831127"
  spec.java:
  - name: String
    fullName: String
- uid: bc819c2f
  spec.java:
  - name: byte[]
    fullName: byte[]
- uid: f75371fa
  spec.java:
  - name: int
    fullName: int
- uid: 0364520f
  spec.java:
  - name: long
    fullName: long
- uid: 30d59cf1
  spec.java:
  - name: String[]
    fullName: String[]
- uid: com.microsoft.azure.management.datalake.store.uploader._front_end_adapter
  parent: com.microsoft.azure.management.datalake.store.uploader
  href: com.microsoft.azure.management.datalake.store.uploader._front_end_adapter.yml
  name: FrontEndAdapter
  fullName: com.microsoft.azure.management.datalake.store.uploader.FrontEndAdapter
  type: Interface
  summary: <p>The frontend adapter that must be implemented in order to execute using the multipart uploader. By implementing this contract, the multi-part uploader will execute. </p>
  syntax:
    content: public interface FrontEndAdapter
- uid: com.microsoft.azure.management.datalake.store.uploader._front_end_adapter_1ab8771533762c7df66172208a96efd9ed
  parent: com.microsoft.azure.management.datalake.store.uploader._front_end_adapter
  href: com.microsoft.azure.management.datalake.store.uploader._front_end_adapter.yml
  name: createStream(String streamPath, boolean overwrite, byte[] data, int byteCount)
  fullName: void com.microsoft.azure.management.datalake.store.uploader.FrontEndAdapter.createStream(String streamPath, boolean overwrite, byte[] data, int byteCount)
  type: Method
  summary: >-
    <p>Creates a new, empty stream at the given path.</p>

    <p></p>
  syntax:
    content: public void createStream(String streamPath, boolean overwrite, byte[] data, int byteCount)
    parameters:
    - id: streamPath
      type: "26831127"
      description: <p>The relative path to the stream. </p>
    - id: overwrite
      type: 4fc6e284
      description: <p>Whether to overwrite an existing stream. </p>
    - id: data
      type: bc819c2f
      description: <p>The data to include in the stream during creation. </p>
    - id: byteCount
      type: f75371fa
      description: <p>The number of bytes from data to include (starting at 0). </p>
- uid: com.microsoft.rest._rest_exception
  parent: com.microsoft.rest
  href: com.microsoft.rest._rest_exception.yml
  name: RestException
  fullName: com.microsoft.rest.RestException
  type: Class
  summary: <p>Exception thrown for an invalid response with custom error information. </p>
  syntax:
    content: public class RestException
- uid: com.microsoft.azure.management.datalake.store.uploader._front_end_adapter_1ac0fb5d67c44b9ceba06f59625cffb38e
  parent: com.microsoft.azure.management.datalake.store.uploader._front_end_adapter
  href: com.microsoft.azure.management.datalake.store.uploader._front_end_adapter.yml
  name: deleteStream(String streamPath, boolean recurse)
  fullName: void com.microsoft.azure.management.datalake.store.uploader.FrontEndAdapter.deleteStream(String streamPath, boolean recurse)
  type: Method
  summary: >-
    <p>Deletes an existing stream at the given path.</p>

    <p></p>
  syntax:
    content: public void deleteStream(String streamPath, boolean recurse)
    parameters:
    - id: streamPath
      type: "26831127"
      description: <p>The relative path to the stream. </p>
    - id: recurse
      type: 4fc6e284
      description: <p>if set to true recursively delete. This is used for folder streams only. </p>
- uid: com.microsoft.azure.management.datalake.store.uploader._front_end_adapter_1a9ce0415d0e74ce3d6fbb66a9b1f5327c
  parent: com.microsoft.azure.management.datalake.store.uploader._front_end_adapter
  href: com.microsoft.azure.management.datalake.store.uploader._front_end_adapter.yml
  name: appendToStream(String streamPath, byte[] data, long offset, int length)
  fullName: void com.microsoft.azure.management.datalake.store.uploader.FrontEndAdapter.appendToStream(String streamPath, byte[] data, long offset, int length)
  type: Method
  summary: >-
    <p>Appends the given byte array to the end of a given stream.</p>

    <p></p>
  syntax:
    content: public void appendToStream(String streamPath, byte[] data, long offset, int length)
    parameters:
    - id: streamPath
      type: "26831127"
      description: <p>The relative path to the stream. </p>
    - id: data
      type: bc819c2f
      description: <p>An array of bytes to be appended to the stream. </p>
    - id: offset
      type: 0364520f
      description: <p>The offset at which to append to the stream. </p>
    - id: length
      type: f75371fa
      description: <p>The number of bytes to append (starting at 0). </p>
- uid: com.microsoft.azure.management.datalake.store.uploader._front_end_adapter_1ac8b696fea86daf2e098af72fdcda0121
  parent: com.microsoft.azure.management.datalake.store.uploader._front_end_adapter
  href: com.microsoft.azure.management.datalake.store.uploader._front_end_adapter.yml
  name: streamExists(String streamPath)
  fullName: boolean com.microsoft.azure.management.datalake.store.uploader.FrontEndAdapter.streamExists(String streamPath)
  type: Method
  summary: >-
    <p>Determines if the stream with given path exists.</p>

    <p></p>
  syntax:
    content: public boolean streamExists(String streamPath)
    parameters:
    - id: streamPath
      type: "26831127"
      description: <p>The relative path to the stream. </p>
    return:
      type: 4fc6e284
      description: <p>True if the stream exists, false otherwise. </p>
- uid: com.microsoft.azure.management.datalake.store.uploader._front_end_adapter_1a31b19ae3b0c0f9c201d9694804c5cc51
  parent: com.microsoft.azure.management.datalake.store.uploader._front_end_adapter
  href: com.microsoft.azure.management.datalake.store.uploader._front_end_adapter.yml
  name: getStreamLength(String streamPath)
  fullName: long com.microsoft.azure.management.datalake.store.uploader.FrontEndAdapter.getStreamLength(String streamPath)
  type: Method
  summary: >-
    <p>Gets a value indicating the length of a stream, in bytes.</p>

    <p></p>
  syntax:
    content: public long getStreamLength(String streamPath)
    parameters:
    - id: streamPath
      type: "26831127"
      description: <p>The relative path to the stream. </p>
    return:
      type: 0364520f
      description: <p>The length of the stream, in bytes. </p>
- uid: com.microsoft.azure.management.datalake.store.uploader._front_end_adapter_1ad2468325cf658d071116d95c9faf8099
  parent: com.microsoft.azure.management.datalake.store.uploader._front_end_adapter
  href: com.microsoft.azure.management.datalake.store.uploader._front_end_adapter.yml
  name: concatenate(String targetStreamPath, String[] inputStreamPaths)
  fullName: void com.microsoft.azure.management.datalake.store.uploader.FrontEndAdapter.concatenate(String targetStreamPath, String[] inputStreamPaths)
  type: Method
  summary: >-
    <p>Concatenates the given input streams (in order) into the given target stream. At the end of this operation, input streams will be deleted.</p>

    <p></p>
  syntax:
    content: public void concatenate(String targetStreamPath, String[] inputStreamPaths)
    parameters:
    - id: targetStreamPath
      type: "26831127"
      description: <p>The relative path to the target stream. </p>
    - id: inputStreamPaths
      type: 30d59cf1
      description: <p>An ordered array of paths to the input streams. </p>
- uid: com.microsoft.azure.management.datalake.store.uploader._data_lake_store_uploader
  parent: com.microsoft.azure.management.datalake.store.uploader
  href: com.microsoft.azure.management.datalake.store.uploader._data_lake_store_uploader.yml
  name: DataLakeStoreUploader
  fullName: com.microsoft.azure.management.datalake.store.uploader.DataLakeStoreUploader
  type: Class
  summary: <p>Represents a general purpose file uploader into DataLake. Supports the efficient upload of large files. </p>
  syntax:
    content: public class DataLakeStoreUploader

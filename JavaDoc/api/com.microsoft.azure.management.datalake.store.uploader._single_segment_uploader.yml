items:
- uid: com.microsoft.azure.management.datalake.store.uploader._single_segment_uploader
  id: _single_segment_uploader
  parent: com.microsoft.azure.management.datalake.store.uploader
  children:
  - com.microsoft.azure.management.datalake.store.uploader._single_segment_uploader.BUFFER_LENGTH()
  - com.microsoft.azure.management.datalake.store.uploader._single_segment_uploader.MAX_BUFFER_UPLOAD_ATTEMPT_COUNT()
  - com.microsoft.azure.management.datalake.store.uploader._single_segment_uploader.MAX_RECORD_LENGTH()
  - com.microsoft.azure.management.datalake.store.uploader._single_segment_uploader.MAXIMUM_BACKOFF_WAIT_SECONDS()
  - com.microsoft.azure.management.datalake.store.uploader._single_segment_uploader.setUseBackOffRetryStrategy(boolean)
  - com.microsoft.azure.management.datalake.store.uploader._single_segment_uploader.SingleSegmentUploader(int,UploadMetadata,FrontEndAdapter)
  - com.microsoft.azure.management.datalake.store.uploader._single_segment_uploader.upload()
  - com.microsoft.azure.management.datalake.store.uploader._single_segment_uploader.useBackOffRetryStrategy()
  - com.microsoft.azure.management.datalake.store.uploader._single_segment_uploader.waitForRetry(int,boolean)
  href: com.microsoft.azure.management.datalake.store.uploader._single_segment_uploader.yml
  langs:
  - java
  name: SingleSegmentUploader
  fullName: com.microsoft.azure.management.datalake.store.uploader.SingleSegmentUploader
  type: Class
  source:
    remote: &o0
      path: azure-mgmt-datalake-store-uploader/src/main/java/com/microsoft/azure/management/datalake/store/uploader/SingleSegmentUploader.java
      branch: master
      repo: https://github.com/Azure/azure-sdk-for-java.git
    path: azure-mgmt-datalake-store-uploader/src/main/java/com/microsoft/azure/management/datalake/store/uploader/SingleSegmentUploader.java
    startLine: 19
  package: com.microsoft.azure.management.datalake.store.uploader
  summary: <p>Represents an uploader for a single segment of a larger file. </p>
  syntax:
    content: public class SingleSegmentUploader
  inheritance:
  - java.lang.Object
- uid: com.microsoft.azure.management.datalake.store.uploader._single_segment_uploader.BUFFER_LENGTH()
  id: BUFFER_LENGTH()
  parent: com.microsoft.azure.management.datalake.store.uploader._single_segment_uploader
  href: com.microsoft.azure.management.datalake.store.uploader._single_segment_uploader.yml
  langs:
  - java
  name: BUFFER_LENGTH
  fullName: final int com.microsoft.azure.management.datalake.store.uploader.SingleSegmentUploader.BUFFER_LENGTH
  type: Field
  source:
    remote: *o0
    path: azure-mgmt-datalake-store-uploader/src/main/java/com/microsoft/azure/management/datalake/store/uploader/SingleSegmentUploader.java
    startLine: 24
  package: com.microsoft.azure.management.datalake.store.uploader
  summary: <p>The length of the buffers to upload (4MB). </p>
  syntax:
    content: public static final int BUFFER_LENGTH= 4 * 1024 * 1024
    return:
      type: cd225469
- uid: com.microsoft.azure.management.datalake.store.uploader._single_segment_uploader.MAX_BUFFER_UPLOAD_ATTEMPT_COUNT()
  id: MAX_BUFFER_UPLOAD_ATTEMPT_COUNT()
  parent: com.microsoft.azure.management.datalake.store.uploader._single_segment_uploader
  href: com.microsoft.azure.management.datalake.store.uploader._single_segment_uploader.yml
  langs:
  - java
  name: MAX_BUFFER_UPLOAD_ATTEMPT_COUNT
  fullName: final int com.microsoft.azure.management.datalake.store.uploader.SingleSegmentUploader.MAX_BUFFER_UPLOAD_ATTEMPT_COUNT
  type: Field
  source:
    remote: *o0
    path: azure-mgmt-datalake-store-uploader/src/main/java/com/microsoft/azure/management/datalake/store/uploader/SingleSegmentUploader.java
    startLine: 39
  package: com.microsoft.azure.management.datalake.store.uploader
  summary: <p>The maximum number of times to attempt to upload the buffer. </p>
  syntax:
    content: public static final int MAX_BUFFER_UPLOAD_ATTEMPT_COUNT= 4
    return:
      type: cd225469
- uid: com.microsoft.azure.management.datalake.store.uploader._single_segment_uploader.MAX_RECORD_LENGTH()
  id: MAX_RECORD_LENGTH()
  parent: com.microsoft.azure.management.datalake.store.uploader._single_segment_uploader
  href: com.microsoft.azure.management.datalake.store.uploader._single_segment_uploader.yml
  langs:
  - java
  name: MAX_RECORD_LENGTH
  fullName: final int com.microsoft.azure.management.datalake.store.uploader.SingleSegmentUploader.MAX_RECORD_LENGTH
  type: Field
  source:
    remote: *o0
    path: azure-mgmt-datalake-store-uploader/src/main/java/com/microsoft/azure/management/datalake/store/uploader/SingleSegmentUploader.java
    startLine: 29
  package: com.microsoft.azure.management.datalake.store.uploader
  summary: <p>4MB is the maximum length of a single extent. So if one record is longer than this, then we will fast fail, since that record will cross extent boundaries. </p>
  syntax:
    content: public static final int MAX_RECORD_LENGTH= 4 * 1024 * 1024
    return:
      type: cd225469
- uid: com.microsoft.azure.management.datalake.store.uploader._single_segment_uploader.MAXIMUM_BACKOFF_WAIT_SECONDS()
  id: MAXIMUM_BACKOFF_WAIT_SECONDS()
  parent: com.microsoft.azure.management.datalake.store.uploader._single_segment_uploader
  href: com.microsoft.azure.management.datalake.store.uploader._single_segment_uploader.yml
  langs:
  - java
  name: MAXIMUM_BACKOFF_WAIT_SECONDS
  fullName: final int com.microsoft.azure.management.datalake.store.uploader.SingleSegmentUploader.MAXIMUM_BACKOFF_WAIT_SECONDS
  type: Field
  source:
    remote: *o0
    path: azure-mgmt-datalake-store-uploader/src/main/java/com/microsoft/azure/management/datalake/store/uploader/SingleSegmentUploader.java
    startLine: 34
  package: com.microsoft.azure.management.datalake.store.uploader
  summary: <p>During upload retries, this indicates the maximum amount of time, in seconds, that we will wait between retries. </p>
  syntax:
    content: public static final int MAXIMUM_BACKOFF_WAIT_SECONDS= 32
    return:
      type: cd225469
- uid: com.microsoft.azure.management.datalake.store.uploader._single_segment_uploader.setUseBackOffRetryStrategy(boolean)
  id: setUseBackOffRetryStrategy(boolean)
  parent: com.microsoft.azure.management.datalake.store.uploader._single_segment_uploader
  href: com.microsoft.azure.management.datalake.store.uploader._single_segment_uploader.yml
  langs:
  - java
  name: setUseBackOffRetryStrategy(boolean isEnabled)
  fullName: void com.microsoft.azure.management.datalake.store.uploader.SingleSegmentUploader.setUseBackOffRetryStrategy(boolean isEnabled)
  type: Method
  source:
    remote: *o0
    path: azure-mgmt-datalake-store-uploader/src/main/java/com/microsoft/azure/management/datalake/store/uploader/SingleSegmentUploader.java
    startLine: 79
  package: com.microsoft.azure.management.datalake.store.uploader
  syntax:
    content: public void setUseBackOffRetryStrategy(boolean isEnabled)
    parameters:
    - id: isEnabled
      type: 4fc6e284
      description: <p>A value indicating whether to use a back-off (exponenential) in case of individual block failures. If set to 'false' every retry is handled immediately; otherwise an amount of time is waited between retries, as a function of power of 2. </p>
- uid: com.microsoft.azure.management.datalake.store.uploader._single_segment_uploader.SingleSegmentUploader(int,UploadMetadata,FrontEndAdapter)
  id: SingleSegmentUploader(int,UploadMetadata,FrontEndAdapter)
  parent: com.microsoft.azure.management.datalake.store.uploader._single_segment_uploader
  href: com.microsoft.azure.management.datalake.store.uploader._single_segment_uploader.yml
  langs:
  - java
  name: SingleSegmentUploader(int segmentNumber, UploadMetadata uploadMetadata, FrontEndAdapter frontEnd)
  fullName: com.microsoft.azure.management.datalake.store.uploader.SingleSegmentUploader.SingleSegmentUploader(int segmentNumber, UploadMetadata uploadMetadata, FrontEndAdapter frontEnd)
  type: Constructor
  source:
    remote: *o0
    path: azure-mgmt-datalake-store-uploader/src/main/java/com/microsoft/azure/management/datalake/store/uploader/SingleSegmentUploader.java
    startLine: 52
  package: com.microsoft.azure.management.datalake.store.uploader
  summary: >-
    <p>Creates a new uploader for a single segment.</p>

    <p></p>
  syntax:
    content: public SingleSegmentUploader(int segmentNumber, UploadMetadata uploadMetadata, FrontEndAdapter frontEnd)
    parameters:
    - id: segmentNumber
      type: f75371fa
      description: <p>The sequence number of the segment. </p>
    - id: uploadMetadata
      type: com.microsoft.azure.management.datalake.store.uploader._upload_metadata
      description: <p>The metadata for the entire upload. </p>
    - id: frontEnd
      type: com.microsoft.azure.management.datalake.store.uploader._front_end_adapter
      description: <p>A pointer to the front end. </p>
- uid: com.microsoft.azure.management.datalake.store.uploader._single_segment_uploader.upload()
  id: upload()
  parent: com.microsoft.azure.management.datalake.store.uploader._single_segment_uploader
  href: com.microsoft.azure.management.datalake.store.uploader._single_segment_uploader.yml
  langs:
  - java
  name: upload()
  fullName: void com.microsoft.azure.management.datalake.store.uploader.SingleSegmentUploader.upload()
  type: Method
  source:
    remote: *o0
    path: azure-mgmt-datalake-store-uploader/src/main/java/com/microsoft/azure/management/datalake/store/uploader/SingleSegmentUploader.java
    startLine: 90
  package: com.microsoft.azure.management.datalake.store.uploader
  summary: >-
    <p>Uploads the portion of the InputFilePath to the given TargetStreamPath, starting at the given StartOffset. The segment is further divided into equally-sized blocks which are uploaded in sequence. Each such block is attempted a certain number of times; if after that it still cannot be uploaded, the entire segment is aborted (in which case no cleanup is performed on the server).</p>

    <p></p>
  syntax:
    content: public void upload()
  exceptions:
  - type: 8a99d4b0
    description: <p>if there is any failure during the upload </p>
- uid: com.microsoft.azure.management.datalake.store.uploader._single_segment_uploader.useBackOffRetryStrategy()
  id: useBackOffRetryStrategy()
  parent: com.microsoft.azure.management.datalake.store.uploader._single_segment_uploader
  href: com.microsoft.azure.management.datalake.store.uploader._single_segment_uploader.yml
  langs:
  - java
  name: useBackOffRetryStrategy()
  fullName: boolean com.microsoft.azure.management.datalake.store.uploader.SingleSegmentUploader.useBackOffRetryStrategy()
  type: Method
  source:
    remote: *o0
    path: azure-mgmt-datalake-store-uploader/src/main/java/com/microsoft/azure/management/datalake/store/uploader/SingleSegmentUploader.java
    startLine: 70
  package: com.microsoft.azure.management.datalake.store.uploader
  syntax:
    content: public boolean useBackOffRetryStrategy()
    return:
      type: 4fc6e284
      description: <p>A value indicating whether to use a back-off (exponenential) in case of individual block failures. If set to 'false' every retry is handled immediately; otherwise an amount of time is waited between retries, as a function of power of 2. </p>
- uid: com.microsoft.azure.management.datalake.store.uploader._single_segment_uploader.waitForRetry(int,boolean)
  id: waitForRetry(int,boolean)
  parent: com.microsoft.azure.management.datalake.store.uploader._single_segment_uploader
  href: com.microsoft.azure.management.datalake.store.uploader._single_segment_uploader.yml
  langs:
  - java
  name: waitForRetry(int attemptCount, boolean useBackOffRetryStrategy)
  fullName: static void com.microsoft.azure.management.datalake.store.uploader.SingleSegmentUploader.waitForRetry(int attemptCount, boolean useBackOffRetryStrategy)
  type: Method
  source:
    remote: *o0
    path: azure-mgmt-datalake-store-uploader/src/main/java/com/microsoft/azure/management/datalake/store/uploader/SingleSegmentUploader.java
    startLine: 284
  package: com.microsoft.azure.management.datalake.store.uploader
  summary: >-
    <p>Enables use of a back off retry strategy, allowing a caller to wait before attempting an action again.</p>

    <p></p>
  syntax:
    content: public static void waitForRetry(int attemptCount, boolean useBackOffRetryStrategy)
    parameters:
    - id: attemptCount
      type: f75371fa
      description: <p>The number of attempts that have already been done </p>
    - id: useBackOffRetryStrategy
      type: 4fc6e284
      description: <p>whether to use the back off strategy or not. </p>
  exceptions:
  - type: 8256ba40
    description: <p>Thrown if there is an interrupt during the sleep. </p>
references:
- uid: cd225469
  spec.java:
  - name: final int
    fullName: final int
- uid: f75371fa
  spec.java:
  - name: int
    fullName: int
- uid: 4fc6e284
  spec.java:
  - name: boolean
    fullName: boolean
- uid: 8a99d4b0
  spec.java:
  - name: Exception
    fullName: Exception
- uid: 8256ba40
  spec.java:
  - name: InterruptedException
    fullName: InterruptedException
- uid: com.microsoft.azure.management.datalake.store.uploader._front_end_adapter
  parent: com.microsoft.azure.management.datalake.store.uploader
  href: com.microsoft.azure.management.datalake.store.uploader._front_end_adapter.yml
  name: FrontEndAdapter
  fullName: com.microsoft.azure.management.datalake.store.uploader.FrontEndAdapter
  type: Interface
  summary: <p>The frontend adapter that must be implemented in order to execute using the multipart uploader. By implementing this contract, the multi-part uploader will execute. </p>
  syntax:
    content: public interface FrontEndAdapter
- uid: com.microsoft.azure.management.datalake.store.uploader._upload_segment_metadata
  parent: com.microsoft.azure.management.datalake.store.uploader
  href: com.microsoft.azure.management.datalake.store.uploader._upload_segment_metadata.yml
  name: UploadSegmentMetadata
  fullName: com.microsoft.azure.management.datalake.store.uploader.UploadSegmentMetadata
  type: Class
  summary: <p>Represents metadata for a particular file segment. </p>
  syntax:
    content: public class UploadSegmentMetadata
- uid: com.microsoft.azure.management.datalake.store.uploader._upload_metadata
  parent: com.microsoft.azure.management.datalake.store.uploader
  href: com.microsoft.azure.management.datalake.store.uploader._upload_metadata.yml
  name: UploadMetadata
  fullName: com.microsoft.azure.management.datalake.store.uploader.UploadMetadata
  type: Class
  summary: <p>Represents general metadata pertaining to an upload. </p>
  syntax:
    content: public class UploadMetadata
- uid: com.microsoft.azure.management.datalake.store.uploader._upload_failed_exception
  parent: com.microsoft.azure.management.datalake.store.uploader
  href: com.microsoft.azure.management.datalake.store.uploader._upload_failed_exception.yml
  name: UploadFailedException
  fullName: com.microsoft.azure.management.datalake.store.uploader.UploadFailedException
  type: Class
  summary: <p>Represents an exception that is thrown when an upload fails. </p>
  syntax:
    content: public class UploadFailedException

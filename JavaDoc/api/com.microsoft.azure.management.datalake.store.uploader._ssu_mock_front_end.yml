items:
- uid: com.microsoft.azure.management.datalake.store.uploader._ssu_mock_front_end
  id: _ssu_mock_front_end
  parent: com.microsoft.azure.management.datalake.store.uploader
  children:
  - com.microsoft.azure.management.datalake.store.uploader._ssu_mock_front_end_1a55241f67118f276007285a1bf22769a0
  - com.microsoft.azure.management.datalake.store.uploader._ssu_mock_front_end_1adc4ff10bd2d417c1ca4db9915acfb05c
  - com.microsoft.azure.management.datalake.store.uploader._ssu_mock_front_end_1a9c32a27860142958fa0a5e159e7df143
  - com.microsoft.azure.management.datalake.store.uploader._ssu_mock_front_end_1a57387b2365e835f19a490eb6a7190e36
  - com.microsoft.azure.management.datalake.store.uploader._ssu_mock_front_end_1a1cf384c3b8e7d9606f4fe9abc80b4789
  - com.microsoft.azure.management.datalake.store.uploader._ssu_mock_front_end_1aec3517189d01b53d835542f5d97b9aef
  - com.microsoft.azure.management.datalake.store.uploader._ssu_mock_front_end_1a1d720b4215f252cbe187831e750f6b80
  href: com.microsoft.azure.management.datalake.store.uploader._ssu_mock_front_end.yml
  langs:
  - java
  name: SsuMockFrontEnd
  fullName: com.microsoft.azure.management.datalake.store.uploader.SsuMockFrontEnd
  type: Class
  source:
    remote: &o0
      path: azure-mgmt-datalake-store-uploader/src/test/java/com/microsoft/azure/management/datalake/store/uploader/SsuMockFrontEnd.java
      branch: master
      repo: https://github.com/Azure/azure-sdk-for-java.git
    path: azure-mgmt-datalake-store-uploader/src/test/java/com/microsoft/azure/management/datalake/store/uploader/SsuMockFrontEnd.java
    startLine: 14
  package: com.microsoft.azure.management.datalake.store.uploader
  summary: <p>Represents a mocked front end for testing the <xref href="com.microsoft.azure.management.datalake.store.uploader._single_segment_uploader" data-throw-if-not-resolved="false"></xref></p>
  syntax:
    content: public class SsuMockFrontEnd
  inheritance:
  - com.microsoft.azure.management.datalake.store.uploader._front_end_adapter
- uid: com.microsoft.azure.management.datalake.store.uploader._ssu_mock_front_end_1a55241f67118f276007285a1bf22769a0
  id: _ssu_mock_front_end_1a55241f67118f276007285a1bf22769a0
  parent: com.microsoft.azure.management.datalake.store.uploader._ssu_mock_front_end
  href: com.microsoft.azure.management.datalake.store.uploader._ssu_mock_front_end.yml
  langs:
  - java
  name: appendToStream(String streamPath, byte[] data, long offset, int byteCount)
  fullName: void com.microsoft.azure.management.datalake.store.uploader.SsuMockFrontEnd.appendToStream(String streamPath, byte[] data, long offset, int byteCount)
  type: Method
  source:
    remote: *o0
    path: azure-mgmt-datalake-store-uploader/src/test/java/com/microsoft/azure/management/datalake/store/uploader/SsuMockFrontEnd.java
    startLine: 62
  package: com.microsoft.azure.management.datalake.store.uploader
  summary: >-
    <p>Appends the given byte array to the end of a given stream.</p>

    <p></p>
  syntax:
    content: public void appendToStream(String streamPath, byte[] data, long offset, int byteCount)
    parameters:
    - id: streamPath
      type: "26831127"
      description: <p>The relative path to the stream. </p>
    - id: data
      type: bc819c2f
      description: <p>An array of bytes to be appended to the stream. </p>
    - id: offset
      type: 0364520f
      description: <p>The offset at which to append to the stream. </p>
    - id: length
      type: f75371fa
      description: <p>The number of bytes to append (starting at 0). </p>
  overridden: com.microsoft.azure.management.datalake.store.uploader._front_end_adapter_1a9ce0415d0e74ce3d6fbb66a9b1f5327c
- uid: com.microsoft.azure.management.datalake.store.uploader._ssu_mock_front_end_1adc4ff10bd2d417c1ca4db9915acfb05c
  id: _ssu_mock_front_end_1adc4ff10bd2d417c1ca4db9915acfb05c
  parent: com.microsoft.azure.management.datalake.store.uploader._ssu_mock_front_end
  href: com.microsoft.azure.management.datalake.store.uploader._ssu_mock_front_end.yml
  langs:
  - java
  name: concatenate(String targetStreamPath, String[] inputStreamPaths)
  fullName: void com.microsoft.azure.management.datalake.store.uploader.SsuMockFrontEnd.concatenate(String targetStreamPath, String[] inputStreamPaths)
  type: Method
  source:
    remote: *o0
    path: azure-mgmt-datalake-store-uploader/src/test/java/com/microsoft/azure/management/datalake/store/uploader/SsuMockFrontEnd.java
    startLine: 92
  package: com.microsoft.azure.management.datalake.store.uploader
  summary: >-
    <p>Concatenates the given input streams (in order) into the given target stream. At the end of this operation, input streams will be deleted.</p>

    <p></p>
  syntax:
    content: public void concatenate(String targetStreamPath, String[] inputStreamPaths)
    parameters:
    - id: targetStreamPath
      type: "26831127"
      description: <p>The relative path to the target stream. </p>
    - id: inputStreamPaths
      type: 30d59cf1
      description: <p>An ordered array of paths to the input streams. </p>
  overridden: com.microsoft.azure.management.datalake.store.uploader._front_end_adapter_1ad2468325cf658d071116d95c9faf8099
- uid: com.microsoft.azure.management.datalake.store.uploader._ssu_mock_front_end_1a9c32a27860142958fa0a5e159e7df143
  id: _ssu_mock_front_end_1a9c32a27860142958fa0a5e159e7df143
  parent: com.microsoft.azure.management.datalake.store.uploader._ssu_mock_front_end
  href: com.microsoft.azure.management.datalake.store.uploader._ssu_mock_front_end.yml
  langs:
  - java
  name: createStream(String streamPath, boolean overwrite, byte[] data, int byteCount)
  fullName: void com.microsoft.azure.management.datalake.store.uploader.SsuMockFrontEnd.createStream(String streamPath, boolean overwrite, byte[] data, int byteCount)
  type: Method
  source:
    remote: *o0
    path: azure-mgmt-datalake-store-uploader/src/test/java/com/microsoft/azure/management/datalake/store/uploader/SsuMockFrontEnd.java
    startLine: 42
  package: com.microsoft.azure.management.datalake.store.uploader
  summary: >-
    <p>Creates a new, empty stream at the given path.</p>

    <p></p>
  syntax:
    content: public void createStream(String streamPath, boolean overwrite, byte[] data, int byteCount)
    parameters:
    - id: streamPath
      type: "26831127"
      description: <p>The relative path to the stream. </p>
    - id: overwrite
      type: 4fc6e284
      description: <p>Whether to overwrite an existing stream. </p>
    - id: data
      type: bc819c2f
      description: <p>The data to include in the stream during creation. </p>
    - id: byteCount
      type: f75371fa
      description: <p>The number of bytes from data to include (starting at 0). </p>
  overridden: com.microsoft.azure.management.datalake.store.uploader._front_end_adapter_1ab8771533762c7df66172208a96efd9ed
- uid: com.microsoft.azure.management.datalake.store.uploader._ssu_mock_front_end_1a57387b2365e835f19a490eb6a7190e36
  id: _ssu_mock_front_end_1a57387b2365e835f19a490eb6a7190e36
  parent: com.microsoft.azure.management.datalake.store.uploader._ssu_mock_front_end
  href: com.microsoft.azure.management.datalake.store.uploader._ssu_mock_front_end.yml
  langs:
  - java
  name: deleteStream(String streamPath, boolean recurse)
  fullName: void com.microsoft.azure.management.datalake.store.uploader.SsuMockFrontEnd.deleteStream(String streamPath, boolean recurse)
  type: Method
  source:
    remote: *o0
    path: azure-mgmt-datalake-store-uploader/src/test/java/com/microsoft/azure/management/datalake/store/uploader/SsuMockFrontEnd.java
    startLine: 56
  package: com.microsoft.azure.management.datalake.store.uploader
  summary: >-
    <p>Deletes an existing stream at the given path.</p>

    <p></p>
  syntax:
    content: public void deleteStream(String streamPath, boolean recurse)
    parameters:
    - id: streamPath
      type: "26831127"
      description: <p>The relative path to the stream. </p>
    - id: recurse
      type: 4fc6e284
      description: <p>if set to true recursively delete. This is used for folder streams only. </p>
  overridden: com.microsoft.azure.management.datalake.store.uploader._front_end_adapter_1ac0fb5d67c44b9ceba06f59625cffb38e
- uid: com.microsoft.azure.management.datalake.store.uploader._ssu_mock_front_end_1a1cf384c3b8e7d9606f4fe9abc80b4789
  id: _ssu_mock_front_end_1a1cf384c3b8e7d9606f4fe9abc80b4789
  parent: com.microsoft.azure.management.datalake.store.uploader._ssu_mock_front_end
  href: com.microsoft.azure.management.datalake.store.uploader._ssu_mock_front_end.yml
  langs:
  - java
  name: getStreamLength(String streamPath)
  fullName: long com.microsoft.azure.management.datalake.store.uploader.SsuMockFrontEnd.getStreamLength(String streamPath)
  type: Method
  source:
    remote: *o0
    path: azure-mgmt-datalake-store-uploader/src/test/java/com/microsoft/azure/management/datalake/store/uploader/SsuMockFrontEnd.java
    startLine: 84
  package: com.microsoft.azure.management.datalake.store.uploader
  summary: >-
    <p>Gets a value indicating the length of a stream, in bytes.</p>

    <p></p>
  syntax:
    content: public long getStreamLength(String streamPath)
    parameters:
    - id: streamPath
      type: "26831127"
      description: <p>The relative path to the stream. </p>
    return:
      type: 0364520f
      description: <p>The length of the stream, in bytes. </p>
  overridden: com.microsoft.azure.management.datalake.store.uploader._front_end_adapter_1a31b19ae3b0c0f9c201d9694804c5cc51
- uid: com.microsoft.azure.management.datalake.store.uploader._ssu_mock_front_end_1aec3517189d01b53d835542f5d97b9aef
  id: _ssu_mock_front_end_1aec3517189d01b53d835542f5d97b9aef
  parent: com.microsoft.azure.management.datalake.store.uploader._ssu_mock_front_end
  href: com.microsoft.azure.management.datalake.store.uploader._ssu_mock_front_end.yml
  langs:
  - java
  name: SsuMockFrontEnd(FrontEndAdapter baseAdapter, boolean doNothing, boolean testRetry, int failCount)
  fullName: com.microsoft.azure.management.datalake.store.uploader.SsuMockFrontEnd.SsuMockFrontEnd(FrontEndAdapter baseAdapter, boolean doNothing, boolean testRetry, int failCount)
  type: Method
  source:
    remote: *o0
    path: azure-mgmt-datalake-store-uploader/src/test/java/com/microsoft/azure/management/datalake/store/uploader/SsuMockFrontEnd.java
    startLine: 33
  package: com.microsoft.azure.management.datalake.store.uploader
  summary: <p>Constructor with base front end. </p>
  syntax:
    content: public SsuMockFrontEnd(FrontEndAdapter baseAdapter, boolean doNothing, boolean testRetry, int failCount)
    parameters:
    - id: baseAdapter
      type: com.microsoft.azure.management.datalake.store.uploader._front_end_adapter
      description: <p>The base adapter to use for non-mocked methods </p>
    - id: doNothing
      type: 4fc6e284
      description: <p>If true, indicates that all methods should perform no actions and return default values. </p>
    - id: testRetry
      type: 4fc6e284
      description: <p>If true, indicates that method implementations should test for the retry code paths. Cannot be true if doNothing is true. </p>
    - id: failCount
      type: f75371fa
      description: <p>This is required when testRetry is true. It indicates the number of failures to allow for retries. </p>
- uid: com.microsoft.azure.management.datalake.store.uploader._ssu_mock_front_end_1a1d720b4215f252cbe187831e750f6b80
  id: _ssu_mock_front_end_1a1d720b4215f252cbe187831e750f6b80
  parent: com.microsoft.azure.management.datalake.store.uploader._ssu_mock_front_end
  href: com.microsoft.azure.management.datalake.store.uploader._ssu_mock_front_end.yml
  langs:
  - java
  name: streamExists(String streamPath)
  fullName: boolean com.microsoft.azure.management.datalake.store.uploader.SsuMockFrontEnd.streamExists(String streamPath)
  type: Method
  source:
    remote: *o0
    path: azure-mgmt-datalake-store-uploader/src/test/java/com/microsoft/azure/management/datalake/store/uploader/SsuMockFrontEnd.java
    startLine: 76
  package: com.microsoft.azure.management.datalake.store.uploader
  summary: >-
    <p>Determines if the stream with given path exists.</p>

    <p></p>
  syntax:
    content: public boolean streamExists(String streamPath)
    parameters:
    - id: streamPath
      type: "26831127"
      description: <p>The relative path to the stream. </p>
    return:
      type: 4fc6e284
      description: <p>True if the stream exists, false otherwise. </p>
  overridden: com.microsoft.azure.management.datalake.store.uploader._front_end_adapter_1ac8b696fea86daf2e098af72fdcda0121
references:
- uid: 4fc6e284
  spec.java:
  - name: boolean
    fullName: boolean
- uid: f75371fa
  spec.java:
  - name: int
    fullName: int
- uid: "26831127"
  spec.java:
  - name: String
    fullName: String
- uid: bc819c2f
  spec.java:
  - name: byte[]
    fullName: byte[]
- uid: 0364520f
  spec.java:
  - name: long
    fullName: long
- uid: 30d59cf1
  spec.java:
  - name: String[]
    fullName: String[]
- uid: com.microsoft.azure.management.datalake.store.uploader._front_end_adapter
  parent: com.microsoft.azure.management.datalake.store.uploader
  href: com.microsoft.azure.management.datalake.store.uploader._front_end_adapter.yml
  name: FrontEndAdapter
  fullName: com.microsoft.azure.management.datalake.store.uploader.FrontEndAdapter
  type: Interface
  summary: <p>The frontend adapter that must be implemented in order to execute using the multipart uploader. By implementing this contract, the multi-part uploader will execute. </p>
  syntax:
    content: public interface FrontEndAdapter
- uid: com.microsoft.azure.management.datalake.store.uploader._front_end_adapter_1ab8771533762c7df66172208a96efd9ed
  parent: com.microsoft.azure.management.datalake.store.uploader._front_end_adapter
  href: com.microsoft.azure.management.datalake.store.uploader._front_end_adapter.yml
  name: createStream(String streamPath, boolean overwrite, byte[] data, int byteCount)
  fullName: void com.microsoft.azure.management.datalake.store.uploader.FrontEndAdapter.createStream(String streamPath, boolean overwrite, byte[] data, int byteCount)
  type: Method
  summary: >-
    <p>Creates a new, empty stream at the given path.</p>

    <p></p>
  syntax:
    content: public void createStream(String streamPath, boolean overwrite, byte[] data, int byteCount)
    parameters:
    - id: streamPath
      type: "26831127"
      description: <p>The relative path to the stream. </p>
    - id: overwrite
      type: 4fc6e284
      description: <p>Whether to overwrite an existing stream. </p>
    - id: data
      type: bc819c2f
      description: <p>The data to include in the stream during creation. </p>
    - id: byteCount
      type: f75371fa
      description: <p>The number of bytes from data to include (starting at 0). </p>
- uid: com.microsoft.rest._rest_exception
  parent: com.microsoft.rest
  href: com.microsoft.rest._rest_exception.yml
  name: RestException
  fullName: com.microsoft.rest.RestException
  type: Class
  summary: <p>Exception thrown for an invalid response with custom error information. </p>
  syntax:
    content: public class RestException
- uid: com.microsoft.azure.management.datalake.store.uploader._front_end_adapter_1ac0fb5d67c44b9ceba06f59625cffb38e
  parent: com.microsoft.azure.management.datalake.store.uploader._front_end_adapter
  href: com.microsoft.azure.management.datalake.store.uploader._front_end_adapter.yml
  name: deleteStream(String streamPath, boolean recurse)
  fullName: void com.microsoft.azure.management.datalake.store.uploader.FrontEndAdapter.deleteStream(String streamPath, boolean recurse)
  type: Method
  summary: >-
    <p>Deletes an existing stream at the given path.</p>

    <p></p>
  syntax:
    content: public void deleteStream(String streamPath, boolean recurse)
    parameters:
    - id: streamPath
      type: "26831127"
      description: <p>The relative path to the stream. </p>
    - id: recurse
      type: 4fc6e284
      description: <p>if set to true recursively delete. This is used for folder streams only. </p>
- uid: com.microsoft.azure.management.datalake.store.uploader._front_end_adapter_1a9ce0415d0e74ce3d6fbb66a9b1f5327c
  parent: com.microsoft.azure.management.datalake.store.uploader._front_end_adapter
  href: com.microsoft.azure.management.datalake.store.uploader._front_end_adapter.yml
  name: appendToStream(String streamPath, byte[] data, long offset, int length)
  fullName: void com.microsoft.azure.management.datalake.store.uploader.FrontEndAdapter.appendToStream(String streamPath, byte[] data, long offset, int length)
  type: Method
  summary: >-
    <p>Appends the given byte array to the end of a given stream.</p>

    <p></p>
  syntax:
    content: public void appendToStream(String streamPath, byte[] data, long offset, int length)
    parameters:
    - id: streamPath
      type: "26831127"
      description: <p>The relative path to the stream. </p>
    - id: data
      type: bc819c2f
      description: <p>An array of bytes to be appended to the stream. </p>
    - id: offset
      type: 0364520f
      description: <p>The offset at which to append to the stream. </p>
    - id: length
      type: f75371fa
      description: <p>The number of bytes to append (starting at 0). </p>
- uid: com.microsoft.azure.management.datalake.store.uploader._front_end_adapter_1ac8b696fea86daf2e098af72fdcda0121
  parent: com.microsoft.azure.management.datalake.store.uploader._front_end_adapter
  href: com.microsoft.azure.management.datalake.store.uploader._front_end_adapter.yml
  name: streamExists(String streamPath)
  fullName: boolean com.microsoft.azure.management.datalake.store.uploader.FrontEndAdapter.streamExists(String streamPath)
  type: Method
  summary: >-
    <p>Determines if the stream with given path exists.</p>

    <p></p>
  syntax:
    content: public boolean streamExists(String streamPath)
    parameters:
    - id: streamPath
      type: "26831127"
      description: <p>The relative path to the stream. </p>
    return:
      type: 4fc6e284
      description: <p>True if the stream exists, false otherwise. </p>
- uid: com.microsoft.azure.management.datalake.store.uploader._front_end_adapter_1a31b19ae3b0c0f9c201d9694804c5cc51
  parent: com.microsoft.azure.management.datalake.store.uploader._front_end_adapter
  href: com.microsoft.azure.management.datalake.store.uploader._front_end_adapter.yml
  name: getStreamLength(String streamPath)
  fullName: long com.microsoft.azure.management.datalake.store.uploader.FrontEndAdapter.getStreamLength(String streamPath)
  type: Method
  summary: >-
    <p>Gets a value indicating the length of a stream, in bytes.</p>

    <p></p>
  syntax:
    content: public long getStreamLength(String streamPath)
    parameters:
    - id: streamPath
      type: "26831127"
      description: <p>The relative path to the stream. </p>
    return:
      type: 0364520f
      description: <p>The length of the stream, in bytes. </p>
- uid: com.microsoft.azure.management.datalake.store.uploader._front_end_adapter_1ad2468325cf658d071116d95c9faf8099
  parent: com.microsoft.azure.management.datalake.store.uploader._front_end_adapter
  href: com.microsoft.azure.management.datalake.store.uploader._front_end_adapter.yml
  name: concatenate(String targetStreamPath, String[] inputStreamPaths)
  fullName: void com.microsoft.azure.management.datalake.store.uploader.FrontEndAdapter.concatenate(String targetStreamPath, String[] inputStreamPaths)
  type: Method
  summary: >-
    <p>Concatenates the given input streams (in order) into the given target stream. At the end of this operation, input streams will be deleted.</p>

    <p></p>
  syntax:
    content: public void concatenate(String targetStreamPath, String[] inputStreamPaths)
    parameters:
    - id: targetStreamPath
      type: "26831127"
      description: <p>The relative path to the target stream. </p>
    - id: inputStreamPaths
      type: 30d59cf1
      description: <p>An ordered array of paths to the input streams. </p>
- uid: com.microsoft.azure.management.datalake.store.uploader._single_segment_uploader
  parent: com.microsoft.azure.management.datalake.store.uploader
  href: com.microsoft.azure.management.datalake.store.uploader._single_segment_uploader.yml
  name: SingleSegmentUploader
  fullName: com.microsoft.azure.management.datalake.store.uploader.SingleSegmentUploader
  type: Class
  summary: <p>Represents an uploader for a single segment of a larger file. </p>
  syntax:
    content: public class SingleSegmentUploader

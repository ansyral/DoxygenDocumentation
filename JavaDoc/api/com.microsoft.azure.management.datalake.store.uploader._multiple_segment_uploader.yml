items:
- uid: com.microsoft.azure.management.datalake.store.uploader._multiple_segment_uploader
  id: _multiple_segment_uploader
  parent: com.microsoft.azure.management.datalake.store.uploader
  children:
  - com.microsoft.azure.management.datalake.store.uploader._multiple_segment_uploader.MAX_UPLOAD_ATTEMPT_COUNT()
  - com.microsoft.azure.management.datalake.store.uploader._multiple_segment_uploader.MultipleSegmentUploader(UploadMetadata,int,FrontEndAdapter)
  - com.microsoft.azure.management.datalake.store.uploader._multiple_segment_uploader.run()
  - com.microsoft.azure.management.datalake.store.uploader._multiple_segment_uploader.setUseSegmentBlockBackOffRetryStrategy(boolean)
  - com.microsoft.azure.management.datalake.store.uploader._multiple_segment_uploader.upload()
  - com.microsoft.azure.management.datalake.store.uploader._multiple_segment_uploader.useSegmentBlockBackOffRetryStrategy()
  href: com.microsoft.azure.management.datalake.store.uploader._multiple_segment_uploader.yml
  langs:
  - java
  name: MultipleSegmentUploader
  fullName: com.microsoft.azure.management.datalake.store.uploader.MultipleSegmentUploader
  type: Class
  source:
    remote: &o0
      path: azure-mgmt-datalake-store-uploader/src/main/java/com/microsoft/azure/management/datalake/store/uploader/MultipleSegmentUploader.java
      branch: master
      repo: https://github.com/Azure/azure-sdk-for-java.git
    path: azure-mgmt-datalake-store-uploader/src/main/java/com/microsoft/azure/management/datalake/store/uploader/MultipleSegmentUploader.java
    startLine: 16
  package: com.microsoft.azure.management.datalake.store.uploader
  summary: <p>Uploads a local file in parallel by splitting it into several segments, according to the given metadata. </p>
  syntax: &o1
    content: public class MultipleSegmentUploader
  inheritance:
  - java.lang.Object
  - Runnable
- uid: com.microsoft.azure.management.datalake.store.uploader._multiple_segment_uploader.MAX_UPLOAD_ATTEMPT_COUNT()
  id: MAX_UPLOAD_ATTEMPT_COUNT()
  parent: com.microsoft.azure.management.datalake.store.uploader._multiple_segment_uploader
  href: com.microsoft.azure.management.datalake.store.uploader._multiple_segment_uploader.yml
  langs:
  - java
  name: MAX_UPLOAD_ATTEMPT_COUNT
  fullName: final int com.microsoft.azure.management.datalake.store.uploader.MultipleSegmentUploader.MAX_UPLOAD_ATTEMPT_COUNT
  type: Field
  source:
    remote: *o0
    path: azure-mgmt-datalake-store-uploader/src/main/java/com/microsoft/azure/management/datalake/store/uploader/MultipleSegmentUploader.java
    startLine: 21
  package: com.microsoft.azure.management.datalake.store.uploader
  summary: <p>The maximum attempts to upload a segment of the file before failing out. </p>
  syntax:
    content: public static final int MAX_UPLOAD_ATTEMPT_COUNT= 4
    return:
      type: cd225469
- uid: com.microsoft.azure.management.datalake.store.uploader._multiple_segment_uploader.MultipleSegmentUploader(UploadMetadata,int,FrontEndAdapter)
  id: MultipleSegmentUploader(UploadMetadata,int,FrontEndAdapter)
  parent: com.microsoft.azure.management.datalake.store.uploader._multiple_segment_uploader
  href: com.microsoft.azure.management.datalake.store.uploader._multiple_segment_uploader.yml
  langs:
  - java
  name: MultipleSegmentUploader(UploadMetadata uploadMetadata, int maxThreadCount, FrontEndAdapter frontEnd)
  fullName: com.microsoft.azure.management.datalake.store.uploader.MultipleSegmentUploader.MultipleSegmentUploader(UploadMetadata uploadMetadata, int maxThreadCount, FrontEndAdapter frontEnd)
  type: Constructor
  source:
    remote: *o0
    path: azure-mgmt-datalake-store-uploader/src/main/java/com/microsoft/azure/management/datalake/store/uploader/MultipleSegmentUploader.java
    startLine: 35
  package: com.microsoft.azure.management.datalake.store.uploader
  summary: >-
    <p>Creates a new <xref href="com.microsoft.azure.management.datalake.store.uploader._multiple_segment_uploader" data-throw-if-not-resolved="false"></xref>.</p>

    <p></p>
  syntax:
    content: public MultipleSegmentUploader(UploadMetadata uploadMetadata, int maxThreadCount, FrontEndAdapter frontEnd)
    parameters:
    - id: uploadMetadata
      type: com.microsoft.azure.management.datalake.store.uploader._upload_metadata
      description: <p>The metadata that keeps track of the file upload. </p>
    - id: maxThreadCount
      type: f75371fa
      description: <p>The maximum number of threads to use. Note that in some cases, this number may not be reached. </p>
    - id: frontEnd
      type: com.microsoft.azure.management.datalake.store.uploader._front_end_adapter
      description: <p>A pointer to the Front End interface to perform the upload to. </p>
- uid: com.microsoft.azure.management.datalake.store.uploader._multiple_segment_uploader.run()
  id: run()
  parent: com.microsoft.azure.management.datalake.store.uploader._multiple_segment_uploader
  href: com.microsoft.azure.management.datalake.store.uploader._multiple_segment_uploader.yml
  langs:
  - java
  name: run()
  fullName: void com.microsoft.azure.management.datalake.store.uploader.MultipleSegmentUploader.run()
  type: Method
  source:
    remote: *o0
    path: azure-mgmt-datalake-store-uploader/src/main/java/com/microsoft/azure/management/datalake/store/uploader/MultipleSegmentUploader.java
    startLine: 205
  package: com.microsoft.azure.management.datalake.store.uploader
  summary: >-
    <p>When an object implementing interface  is used to create a thread, starting the thread causes the object's  method to be called in that separately executing thread. </p>

    <p>The general contract of the method  is that it may take any action whatsoever.</p>

    <p>In this run, we are allowing each thread to attempt to process all of the remaining segments, which will ultimately result in each thread processing a subset of segments that are still in the queue.</p>

    <p></p>
  syntax:
    content: public void run()
- uid: com.microsoft.azure.management.datalake.store.uploader._multiple_segment_uploader.setUseSegmentBlockBackOffRetryStrategy(boolean)
  id: setUseSegmentBlockBackOffRetryStrategy(boolean)
  parent: com.microsoft.azure.management.datalake.store.uploader._multiple_segment_uploader
  href: com.microsoft.azure.management.datalake.store.uploader._multiple_segment_uploader.yml
  langs:
  - java
  name: setUseSegmentBlockBackOffRetryStrategy(boolean isEnabled)
  fullName: void com.microsoft.azure.management.datalake.store.uploader.MultipleSegmentUploader.setUseSegmentBlockBackOffRetryStrategy(boolean isEnabled)
  type: Method
  source:
    remote: *o0
    path: azure-mgmt-datalake-store-uploader/src/main/java/com/microsoft/azure/management/datalake/store/uploader/MultipleSegmentUploader.java
    startLine: 64
  package: com.microsoft.azure.management.datalake.store.uploader
  syntax:
    content: public void setUseSegmentBlockBackOffRetryStrategy(boolean isEnabled)
    parameters:
    - id: isEnabled
      type: 4fc6e284
      description: <p>A value indicating whether to use a back-off (exponenential) in case of individual block failures. The <xref href="com.microsoft.azure.management.datalake.store.uploader._multiple_segment_uploader" data-throw-if-not-resolved="false"></xref> does not use this directly; it passes it on to <xref href="com.microsoft.azure.management.datalake.store.uploader._single_segment_uploader" data-throw-if-not-resolved="false"></xref>. </p>
- uid: com.microsoft.azure.management.datalake.store.uploader._multiple_segment_uploader.upload()
  id: upload()
  parent: com.microsoft.azure.management.datalake.store.uploader._multiple_segment_uploader
  href: com.microsoft.azure.management.datalake.store.uploader._multiple_segment_uploader.yml
  langs:
  - java
  name: upload()
  fullName: void com.microsoft.azure.management.datalake.store.uploader.MultipleSegmentUploader.upload()
  type: Method
  source:
    remote: *o0
    path: azure-mgmt-datalake-store-uploader/src/main/java/com/microsoft/azure/management/datalake/store/uploader/MultipleSegmentUploader.java
    startLine: 73
  package: com.microsoft.azure.management.datalake.store.uploader
  summary: >-
    <p>Executes the upload of the segments in the file that were not already uploaded (i.e., those that are in a 'Pending' state).</p>

    <p></p>
  syntax:
    content: public void upload()
  exceptions:
  - type: 8256ba40
    description: <p>if there is some interruption sent during a wait. </p>
  - type: com.microsoft.azure.management.datalake.store.uploader._aggregate_upload_exception
    description: <p>if there are any failures in any of the threads running upload. </p>
- uid: com.microsoft.azure.management.datalake.store.uploader._multiple_segment_uploader.useSegmentBlockBackOffRetryStrategy()
  id: useSegmentBlockBackOffRetryStrategy()
  parent: com.microsoft.azure.management.datalake.store.uploader._multiple_segment_uploader
  href: com.microsoft.azure.management.datalake.store.uploader._multiple_segment_uploader.yml
  langs:
  - java
  name: useSegmentBlockBackOffRetryStrategy()
  fullName: boolean com.microsoft.azure.management.datalake.store.uploader.MultipleSegmentUploader.useSegmentBlockBackOffRetryStrategy()
  type: Method
  source:
    remote: *o0
    path: azure-mgmt-datalake-store-uploader/src/main/java/com/microsoft/azure/management/datalake/store/uploader/MultipleSegmentUploader.java
    startLine: 55
  package: com.microsoft.azure.management.datalake.store.uploader
  syntax:
    content: public boolean useSegmentBlockBackOffRetryStrategy()
    return:
      type: 4fc6e284
      description: <p>A value indicating whether to use a back-off (exponenential) in case of individual block failures. The <xref href="com.microsoft.azure.management.datalake.store.uploader._multiple_segment_uploader" data-throw-if-not-resolved="false"></xref> does not use this directly; it passes it on to <xref href="com.microsoft.azure.management.datalake.store.uploader._single_segment_uploader" data-throw-if-not-resolved="false"></xref>. </p>
references:
- uid: cd225469
  spec.java:
  - name: final int
    fullName: final int
- uid: f75371fa
  spec.java:
  - name: int
    fullName: int
- uid: 4fc6e284
  spec.java:
  - name: boolean
    fullName: boolean
- uid: 8256ba40
  spec.java:
  - name: InterruptedException
    fullName: InterruptedException
- uid: com.microsoft.azure.management.datalake.store.uploader._upload_metadata
  parent: com.microsoft.azure.management.datalake.store.uploader
  href: com.microsoft.azure.management.datalake.store.uploader._upload_metadata.yml
  name: UploadMetadata
  fullName: com.microsoft.azure.management.datalake.store.uploader.UploadMetadata
  type: Class
  summary: <p>Represents general metadata pertaining to an upload. </p>
  syntax:
    content: public class UploadMetadata
- uid: com.microsoft.azure.management.datalake.store.uploader._front_end_adapter
  parent: com.microsoft.azure.management.datalake.store.uploader
  href: com.microsoft.azure.management.datalake.store.uploader._front_end_adapter.yml
  name: FrontEndAdapter
  fullName: com.microsoft.azure.management.datalake.store.uploader.FrontEndAdapter
  type: Interface
  summary: <p>The frontend adapter that must be implemented in order to execute using the multipart uploader. By implementing this contract, the multi-part uploader will execute. </p>
  syntax:
    content: public interface FrontEndAdapter
- uid: com.microsoft.azure.management.datalake.store.uploader._multiple_segment_uploader
  parent: com.microsoft.azure.management.datalake.store.uploader
  href: com.microsoft.azure.management.datalake.store.uploader._multiple_segment_uploader.yml
  name: MultipleSegmentUploader
  fullName: com.microsoft.azure.management.datalake.store.uploader.MultipleSegmentUploader
  type: Class
  summary: <p>Uploads a local file in parallel by splitting it into several segments, according to the given metadata. </p>
  syntax: *o1
- uid: com.microsoft.azure.management.datalake.store.uploader._single_segment_uploader
  parent: com.microsoft.azure.management.datalake.store.uploader
  href: com.microsoft.azure.management.datalake.store.uploader._single_segment_uploader.yml
  name: SingleSegmentUploader
  fullName: com.microsoft.azure.management.datalake.store.uploader.SingleSegmentUploader
  type: Class
  summary: <p>Represents an uploader for a single segment of a larger file. </p>
  syntax:
    content: public class SingleSegmentUploader
- uid: com.microsoft.azure.management.datalake.store.uploader._aggregate_upload_exception
  parent: com.microsoft.azure.management.datalake.store.uploader
  href: com.microsoft.azure.management.datalake.store.uploader._aggregate_upload_exception.yml
  name: AggregateUploadException
  fullName: com.microsoft.azure.management.datalake.store.uploader.AggregateUploadException
  type: Class
  summary: <p>A wrapper for the exceptions that can be generated during parallel execution of the uploader. </p>
  syntax:
    content: public class AggregateUploadException
- uid: com.microsoft.azure.management.datalake.store.uploader._segment_upload_status
  parent: com.microsoft.azure.management.datalake.store.uploader
  href: com.microsoft.azure.management.datalake.store.uploader._segment_upload_status.yml
  name: SegmentUploadStatus
  fullName: com.microsoft.azure.management.datalake.store.uploader.SegmentUploadStatus
  type: Enum
  summary: <p>Defines various states that a segment upload can have. </p>
  syntax:
    content: public enum SegmentUploadStatus
